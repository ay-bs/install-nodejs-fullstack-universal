version: '3.8'

services:
  # Node.js Development Environment
  nodejs-dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    container_name: nodejs-fullstack-dev
    volumes:
      - ../:/workspace
      - node_modules_cache:/workspace/node_modules
      - npm_cache:/root/.npm
      - yarn_cache:/usr/local/share/.cache/yarn
    ports:
      - "3000:3000"   # React default
      - "3001:3001"   # Alternative port
      - "4200:4200"   # Angular default
      - "5000:5000"   # Express default
      - "5173:5173"   # Vite default
      - "8080:8080"   # Webpack dev server
      - "9000:9000"   # Alternative port
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    networks:
      - fullstack-network
    stdin_open: true
    tty: true
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nodejs-postgres
    environment:
      POSTGRES_DB: fullstack_db
      POSTGRES_USER: developer
      POSTGRES_PASSWORD: dev_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - fullstack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U developer -d fullstack_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongodb:
    image: mongo:6-jammy
    container_name: nodejs-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: developer
      MONGO_INITDB_ROOT_PASSWORD: dev_password
      MONGO_INITDB_DATABASE: fullstack_db
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    networks:
      - fullstack-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nodejs-redis
    command: redis-server --appendonly yes --requirepass dev_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - fullstack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nodejs-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - fullstack-network
    depends_on:
      - nodejs-dev
    restart: unless-stopped

  # Adminer Database Management
  adminer:
    image: adminer:latest
    container_name: nodejs-adminer
    ports:
      - "8081:8080"
    networks:
      - fullstack-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    restart: unless-stopped

  # MongoDB Express
  mongo-express:
    image: mongo-express:latest
    container_name: nodejs-mongo-express
    ports:
      - "8082:8081"
    networks:
      - fullstack-network
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: developer
      ME_CONFIG_MONGODB_ADMINPASSWORD: dev_password
      ME_CONFIG_MONGODB_URL: mongodb://developer:dev_password@mongodb:27017/
    depends_on:
      - mongodb
    restart: unless-stopped

  # Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: nodejs-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:dev_password
    ports:
      - "8083:8081"
    networks:
      - fullstack-network
    depends_on:
      - redis
    restart: unless-stopped

  # Mailhog (Email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: nodejs-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web interface
    networks:
      - fullstack-network
    restart: unless-stopped

  # Testing Environment
  testing:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: testing
    container_name: nodejs-testing
    volumes:
      - ../:/tests
      - node_modules_cache:/tests/node_modules
    environment:
      - NODE_ENV=test
      - CI=true
    networks:
      - fullstack-network
    profiles:
      - testing
    command: ["tail", "-f", "/dev/null"]

networks:
  fullstack-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  node_modules_cache:
    driver: local
  npm_cache:
    driver: local
  yarn_cache:
    driver: local
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
